---
import type { HTMLAttributes } from "astro/types";

import type { Options } from "../../types";

import createListOptions from "../../../utilities/createListOptions/index.ts";
import generateShortId from "../../../utilities/generateShortId/index.ts";
import mapAttributes from "../../../utilities/mapAttributes/index.ts";

export type Props = HTMLAttributes<"input"> & {
  datalist?: HTMLAttributes<"datalist"> | undefined;
  labelledBy?: string | undefined;
  list?: Options | undefined;
};

const {
  autocorrect: _autocorrect,
  datalist = {},
  id = generateShortId(),
  inputmode = "text",
  labelledBy,
  list,
  placeholder: _placeholder,
  type: _type,
  ...props
} = Astro.props;

const attrs = mapAttributes(props, [`text-input`]);
const datalistAttrs = mapAttributes(datalist, ["datalist"]);

const listId = `${id}_list`;
const lst = list ? { list: listId } : {};
---

<input
  aria-labelledby={labelledBy}
  {...attrs}
  {id}
  {inputmode}
  {...lst}
  type="text"
/>
{
  list ? (
    <datalist {...datalistAttrs} id={listId}>
      <Fragment set:html={createListOptions(list)} />
    </datalist>
  ) : null
}
