---
import "./index.css";

import type { HTMLAttributes } from "astro/types";

import type { AstroPage } from "../../types.ts";

import getSiblingLinks from "./getSiblingLinks/";

export type Props = HTMLAttributes<"nav"> & {
  pages: Array<AstroPage>;
};

const { pages, ...props } = Astro.props;

const { pathname } = Astro.url;

const path = pathname.replace(/\/$/, "");
const parentPath = path.replace(/\/([^/]+)$/, "") || "/";

const parent = pages.find(page => page.url?.replace(/\/$/, "") === parentPath);

const attrs = Object.assign(
  {
    class: "sibling-links",
  },
  props
);

const children = parent?.metadata?.children || [];

const { prev, next } = getSiblingLinks(parentPath, path, children);

const nextLink = pages.find(
  page => page.url?.replace(/\/$/, "") === next
)?.metadata;
const prevLink = pages.find(
  page => page.url?.replace(/\/$/, "") === prev
)?.metadata;

const left = await Astro.slots.render("prev");
const right = await Astro.slots.render("next");
---

<nav aria-label="Links to next and previous pages" {...attrs}>
  <ul>
    <li class="previous-link">
      {
        prevLink ? (
          <>
            <Fragment set:html={left} />
            <a href={prev} rel="prev">
              {prevLink?.label || prevLink?.title}
            </a>
          </>
        ) : undefined
      }
    </li>
    <li class="next-link">
      {
        nextLink ? (
          <>
            <a href={next} rel="next">
              {nextLink?.label || nextLink?.title}
            </a>
            <Fragment set:html={right} />
          </>
        ) : undefined
      }
    </li>
  </ul>
</nav>
