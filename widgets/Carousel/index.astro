---
import "./index.css";

import type { HTMLAttributes } from "astro/types";

import generateShortId from "../../utilities/generateShortId";

export type Props = HTMLAttributes<"div"> & {
  label: string;
};

const { id = generateShortId(), label, ...props } = Astro.props;

const attrs = Object.assign(
  {
    "aria-label": label,
    "aria-roledescription": "carousel",
    class: "carousel",
    id,
    role: "region",
  },
  props
);
---

<div {...attrs}>
  <div class="slides">
    <slot />
  </div>
</div>

<script is:inline>
  const carousel = document.querySelector(".carousel");

  if (carousel) {
    const slides = document.querySelectorAll(".slide");

    const controls = document.createElement("DIV");

    controls.classList.add("controls");

    for (const [index, slide] of slides.entries()) {
      const label = document.createElement("LABEL");
      const input = document.createElement("INPUT");
      const span = document.createElement("SPAN");

      input.setAttribute("aria-label", `Slide ${index}`);

      input.setAttribute("aria-hidden", "");
      input.setAttribute("name", `${carousel.id}-slides`);
      input.setAttribute("type", "radio");
      input.setAttribute("value", `${slide.id}`);

      slide.addEventListener("focus", event => {
        event.target.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "center",
        });

        console.log(event.target);
      });

      input.addEventListener("change", event => {
        const id = event.target.value;

        slide.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "center",
        });
      });

      label.appendChild(input);
      label.appendChild(span);

      controls.appendChild(label);
    }

    controls.firstChild.firstChild.setAttribute("checked", "");

    carousel.prepend(controls);
  }
</script>
